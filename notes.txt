┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   FRONTEND      │    │    BACKEND      │    │   SERVICES      │
│   (React.js)    │◄──►│  (Node.js/API)  │◄──►│ (Python Flask)  │
│                 │    │                 │    │ (Google APIs)   │
│                 │    │                 │    │ (GitHub APIs)   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                              ▼
                    ┌─────────────────┐
                    │   DATABASE      │
                    │  (PostgreSQL)   │
                    │   via Prisma    │
                    └─────────────────┘

HOW NODE WORKS 
+---------+       +-----------+       +----------+
| Browser | --->  | HTTP Server| ---> |  Handler |
+---------+       +-----------+       +----------+
                                      | Business |
                                      |  Logic   |
                                      +----------+
Browser (client) makes a request (e.g. GET request).
Node.js HTTP Server listens to request (using http.createServer()).
Passes request to your handler function.
You send back response.

Student Submits → URL Validation → Type Detection → Platform-Specific Processing → Automated Grading → Database Storage → Results Display
Doc URL → Extract Doc ID → Check Ownership → Verify Title Match → Check Completion → Grade → Store
Repo URL → Clone Repository → Gradle Build → Run Tests → Compile Code → Grade → Store

🎯 Core Components
Frontend Layer (React.js)
Authentication: OAuth GitHub integration
Submission Forms: Multi-platform support (Google Docs, GitHub)
Dashboard: Real-time feedback and results
User Management: Role-based access (Students/Instructors)
Backend Layer (Node.js/Express)
RESTful API: CRUD operations for submissions, assignments, users
Authentication Middleware: Passport.js with session management
Controllers: Business logic for submissions, grading, user management
Database ORM: Prisma for PostgreSQL interactions
External Services Integration
Python Flask Microservice: Document validation and processing
Google APIs: Docs API for content analysis, Drive API for permissions
GitHub API: Repository access and OAuth authentication
Gradle Automation: Java project compilation and testing
Database Schema (PostgreSQL)

Users ──┐
        ├─► Submissions ──► Assignments
        │                      │
Sections ┘                     ├─► Courses
                               └─► Instructors


SEND AN ENTRY TO PRISMA DB
curl -X POST http://localhost:5000/api/submit -H "Content-Type: application/json" -d "{\"repoUrl\":\"https://github.com/thturin/test_autograder.git\",\"language\":\"java\",\"score\":95}"
curl -X POST http://localhost:5000/api/submit -H "Content-Type: application/json" -d "{}"




IN ORDER TO RUN SERVER, USE NPM RUN DEV

HOW TO RUN
----------
cd server 
nodemon app.js
npx prisma studio

cd client
npm run dev or npm start

cd scripts/google-docs
python docs_api

-------
Agenda 
-------
when user pastes github link into submission, 
it must match their username in the database 
(important for cheating) [x] IMPORTANT 

use new gmail account for google drive and doc api. That means you will 
have to change private keys []

when user pastes google doc link into submission,
it checks the title of the document to make sure it is the right 
doc [x]

admin view -> late assignments []
| Days Late     | Penalty             |
| ------------- | ------------------- |
| 0 (on time)   | No penalty          |
| 1 day late    | -10%                |
| 2–3 days late | -15%                |
| 4–5 days late | -20%                |
| 6+ days late  | -25% max (hard cap) |

late assignments -> 75%
auto grading late assignnments [x]
admin abilities on front end-> change due date [] 
            -> edit assignment
            -> delete assignment
                    
UPDATE -> check to see if the repository exists in the users profile. 
YOU CAN DO THIS WITH PASSPORT STRATEGY 
better than parsing through the url 

Password feature [x]
students can re-submit [x]
fancier filtering option for admin []
create an assignment in admin [x]
export scores to csv files [x]
AUTHENTICATE USERS GITHUB [x]
create option for github or google doc assignment for admin []
you also need to verify user is pasting correct url for the right assignment [x] 
    for the google doc, user google Drive API. compare owner credentials to email [x]
    for github, compare url link and find github username. [x]

PRIORITY 
1. export scores to csv [x]
2. gradle test integration + test case diff viewer show output vs expected output for failing tests [x]
3. admin filters [x]
4. password [x]

NEXT-LEVEL FEATURES 
1. inline feedback comments (per submission)
2. submission history (track multiple submissions over time, show timestamps and scores )
3. plagarism flag
4. instructor comment broadcast 
5. support file uploads for labs
6. email notification on submission (nodemailer)

BONUS
1. admin data analytics dashbaord 
2. student profile page
3. run tests inside docker 
    containerize the java gradingService


integrate gradle tests [x]

-------
Issues
--------
once a user submits an assignment, it does not update the sumbission overview FIXED had to pass the new submission to userDashboard
re-submission duplicates FIXED
only one button for login-> there are two now one for login and another for authentication
    combine buttons FIXED
**possible issue in the future.. on logout, the githubId and githubUsername is deleted for the user. Upon login, the githubId and githubUsername is stored
in other words, the githubId and username is temporarily stored during the user's session.


**keeping the githubId and username after a user logged out caused the session to keep the user settings, 
** session id and username are now permanently removed on log out


**there was an issue with the server restarting when a project was cloned, 
this was causingf the grading service to restart
the uploads folder is now ignored if updated 

