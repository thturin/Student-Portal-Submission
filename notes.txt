/server
├── app.js
├── /routes
│   └── submissionRoutes.js
├── /controllers
│   └── submissionController.js
├── /services
│   ├── gitService.js
│   ├── languageService.js
│   └── gradingService.js
├── /autograders
│   ├── pythonGrader.py
│   └── javaGrader.sh
├── /uploads
├── .env
└── prisma/schema.prisma

nodemon app.js
npm start

npx prisma migrate dev --name init
npx prisma generate


npx prisma studio


HOW NODE WORKS 
+---------+       +-----------+       +----------+
| Browser | --->  | HTTP Server| ---> |  Handler |
+---------+       +-----------+       +----------+
                                      | Business |
                                      |  Logic   |
                                      +----------+
Browser (client) makes a request (e.g. GET request).
Node.js HTTP Server listens to request (using http.createServer()).
Passes request to your handler function.
You send back response.


SEND AN ENTRY TO PRISMA DB
curl -X POST http://localhost:5000/api/submit -H "Content-Type: application/json" -d "{\"repoUrl\":\"https://github.com/thturin/test_autograder.git\",\"language\":\"java\",\"score\":95}"
curl -X POST http://localhost:5000/api/submit -H "Content-Type: application/json" -d "{}"



-------
Agenda 
-------
Password feature []
students can re-submit [x]
fancier filtering option for admin []
create an assignment in admin [x]
export scores to csv files [x]
AUTHENTICATE USERS GITHUB [x]

PRIORITY 
1. export scores to csv
2. gradle test integration + test case diff viewer show output vs expected output for failing tests
3. admin filters
4. password

NEXT-LEVEL FEATURES 
1. inline feedback comments (per submission)
2. submission history (track multiple submissions over time, show timestamps and scores )
3. plagarism flag
4. instructor comment broadcast 
5. support file uploads for labs
6. email notification on submission (nodemailer)

BONUS
1. admin data analytics dashbaord 
2. student profile page
3. run tests inside docker 
    containerize the java gradingService


integrate gradle tests []

-------
Issues
--------
once a user submits an assignment, it does not update the sumbission overview FIXED had to pass the new submission to userDashboard
re-submission duplicates FIXED
only one button for login-> there are two now one for login and another for authentication
    combine buttons FIXED
**possible issue in the future.. on logout, the githubId and githubUsername is deleted for the user. Upon login, the githubId and githubUsername is stored
in other words, the githubId and username is temporarily stored during the user's session.